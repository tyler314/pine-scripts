// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© ajalbertin

//@version=5
indicator("0DTE_IF",overlay=true)

// Constants
var float profit = 0
var int wins = 0
var int losses = 0
CANDLE_WIDTH = 3
MAX_GAIN = 150
MAX_LOSS = 300
atr = ta.atr(14)

// Input
hour_enter = input.int(title="enter hour time", defval=10, minval=9, maxval=15)
minute_enter = input.int(title="enter minute time", defval=30, minval=0, maxval=59, step=CANDLE_WIDTH)
hour_exit = input.int(title="exit hour time", defval=11, minval=9, maxval=15)
minute_exit = input.int(title="exit minute time", defval=30, minval=0, maxval=59, step=CANDLE_WIDTH)

vix_limit = input.int(title="vix limit", defval=22, minval=1, maxval=40)
atr_input = input.int(title="atr input", defval=10, minval=1, maxval=200)

startDate = input.time(title="Start Date", defval=timestamp("01 Jan 2022 13:30 +0000"))
endDate = input.time(title="End Date", defval=timestamp("01 Jan 2024 19:30 +0000"))
timeSession = input.session(title="Time Session to Analyze", defval="0600-0915")
window() => time >= startDate and time <= endDate ? true : false

// Functions
print(string txt) =>
    // Create label on the first bar.
    var lbl = label.new(bar_index, na, txt, xloc.bar_index, yloc.price, color(color.white), label.style_none, color.white, size.large, text.align_left)
    // On next bars, update the label's x and y position, and the text it displays.
    label.set_xy(lbl, bar_index, ta.highest(10)[1])
    label.set_text(lbl, txt)

valid_day_of_week() => dayofweek == dayofweek.monday or dayofweek.wednesday or dayofweek.friday
valid_time(hour_arg, minute_arg) => timestamp(year, month, dayofweek, hour, minute) == timestamp(year, month, dayofweek, hour_arg, minute_arg) and window()
valid_VIX() => request.security("VIX", str.tostring(CANDLE_WIDTH), close) <= vix_limit

get_minutes_past_enter() =>
    start_time_in_minutes = (hour_enter * 60) + minute_enter
    current_time_in_minutes = (hour * 60) + minute
    diff = current_time_in_minutes - start_time_in_minutes
    if diff < 0
        0
    else
        diff

can_enter_trade() => valid_day_of_week() and valid_time(hour_enter, minute_enter) // and valid_VIX()
can_exit_trade() => valid_day_of_week() and valid_time(hour_exit ,minute_exit) // and valid_VIX()

// MAIN FUNCTION - START HERE
points_changed_since_enter = math.abs(close[0] - close[int(get_minutes_past_enter()/CANDLE_WIDTH)])
is_win() => can_exit_trade() and points_changed_since_enter  <= atr_input
is_loss() => can_exit_trade() and points_changed_since_enter > atr_input

if is_win()
    profit += MAX_GAIN
    wins += 1
if is_loss()
    profit -= MAX_LOSS
    losses += 1
   
successRate = wins / (wins + losses)   
plotshape(can_enter_trade(), title="CALL", style=shape.triangleup, location=location.abovebar, color=color.green)
plotshape(can_exit_trade(), title="CALL", style=shape.triangledown, location=location.abovebar, color=color.purple)

var table tableDisplay = table.new(position.bottom_right, columns = 2, rows = 6, frame_color= color.gray, frame_width = 2, border_width = 2, border_color = color.gray)
if barstate.islast
    table.cell(table_id = tableDisplay, column = 0, row = 0, text = "Success Rate", text_color = color.gray)
    table.cell(table_id = tableDisplay, column = 0, row = 1, text = "Wins", text_color = color.gray)
    table.cell(table_id = tableDisplay, column = 0, row = 2, text = "Losses", text_color = color.gray)
    table.cell(table_id = tableDisplay, column = 0, row = 5, text = "Final Balance", text_color = color.gray)
    
    table.cell(table_id = tableDisplay, column = 1, row = 0, text = str.tostring(successRate), text_color = color.gray)
    table.cell(table_id = tableDisplay, column = 1, row = 1, text = str.tostring(wins), text_color = color.gray)
    table.cell(table_id = tableDisplay, column = 1, row = 2, text = str.tostring(losses), text_color = color.gray)
    table.cell(table_id = tableDisplay, column = 1, row = 5, text = str.tostring(profit), text_color = color.gray)

